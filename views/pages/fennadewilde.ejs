<!DOCTYPE html>
<html lang="en">
	<head>
		<%- include ('../partials/head.ejs'); %>
	</head>

	<body>
		<header><%- include ('../partials/header.ejs'); %></header>
		<main>
			<div class="breadcrumbs">
				<a href="/">Home</a>/<a href="/">Weekly Nerds</a></p>
			</div>

			<section class="maincontent">
				<article class="blog">
					<h1 class="blog-title">Fenna de Wilde</h1>
					<date>February 14th, 2024</date>

					<h2>Accessibility in Phantom</h2>
					<p>Accessibility is often not taken seriously in the business world, yet it's a critical aspect for developers. Implementing accessibility practices is not just a moral obligation but also enhances the user experience for a wide range of users.</p>

					<h2>The Stack</h2>
					<p>The technology stack used for projects includes:</p>
					<ul>
						<li><span class="code">NextJS + TypeScript</span> for the front-end framework and language.</li>
						<li><span class="code">Emotion</span> for CSS-in-JS styling.</li>
						<li><span class="code">Vercel</span> for deployment.</li>
						<li><span class="code">Sanity</span> as the content management system.</li>
						<li><span class="code">Framer Motion</span> as the animation library.</li>
					</ul>
					
					<h2>Always Apply</h2>
					<h3>Focus State</h3>
					<p>Focus states are essential because not all users use a mouse. They provide visual feedback on which element is currently focused. The <span class="code">:focus-visible</span> pseudo-class is recommended over <span class="code">:focus</span>, as it only registers keyboard focus, which is useful for accessibility.</p>
					
					<h3>ARIA Attributes</h3>
					<p>Accessible Rich Internet Applications (ARIA) attributes provide essential information to assistive technologies. Examples include:</p>
					<ul>
						<li><span class="code">aria-label</span>: Provides descriptive text to an element that doesn't have descriptive text or a visible label of its own.</li>
						<li>It's also possible to change based on states, for example, <span class="code">aria-label={isPlaying ? “Pause” : “Play”}</span>.</li>
						<li><span class="code">aria-controls</span> links the control element to the element it controls: provide the controlled element's ID, so screen readers understand the connection and can offer more context to users.</li>
						<li><span class="code">aria-expanded</span> indicates the status of elements that can be expanded or collapsed, such as hamburger menus, dropdowns, etc. Switches between “true” and “false” states.</li>
						<li><span class="code">aria-live</span> instructs the screen reader to announce dynamic changes (JS) immediately.
							<ul>
								<li><span class="code">off</span>: if something changes, no update to the screen reader.</li>
								<li><span class="code">polite</span>: if the screen reader is busy, finish first then announce.</li>
								<li><span class="code">assertive</span>: if the screen reader is busy, stop and announce immediately.</li>
							</ul>
						</li>
						<li><span class="code">aria-live</span> is often used together with <span class="code">aria-atomic</span>.
        					<ul>
            				<li><span class="code">false</span>: screen readers announce changed nodes.</li>
            				<li><span class="code">true</span>: screen readers introduce the entire changed area as a whole.</li>
        					</ul>
    					</li>
					</ul>

					<h3>Accessible Carousels</h3>
					<p>For accessible carousels, the container must have a <span class="code">role=”region”</span> or be a section, along with <span class="code">aria-roledescription=”carousel”</span> and an <span class="code">aria-labelledby</span> or <span class="code">aria-label</span> (depending on whether a title is available, then you refer to the title with <span class="code">aria-labelledby</span>; if there is no title, then <span class="code">aria-label</span>).</p>
					<p>The slide must have <span class="code">role=”group”</span>, <span class="code">aria-roledescription=”slide”</span>, and <span class="code">aria-labelledby</span>. You can use <span class="code">aria-label</span> to clarify which slide you are on. If a slide is not visible on the screen, hide it with <span class="code">aria-hidden=”true”</span> on the slide's wrapper and <span class="code">tabindex=”-1”</span> on all focusable children.</p>
					<p>Avoid <span class="code">li</span> elements, as hiding them will not match the announced number of <span class="code">li</span>’s with the actual number. Carousel controls must have <span class="code">role=”group”</span> with an aria-label, and the control button showing the current slide has <span class="code">aria-disabled=”true”</span>.</p>

					<h3>Focus Guards and ESC Key Configurations</h3>
					<p>Focus guards ensure that keyboard users can navigate without accidentally leaving the modal. Build the modal with <span class="code">dialog</span> (dialog receives <span class="code">aria-modal=”true”</span>). Focus is automatically sent to the close button; when the user closes, focus returns to the button that opened it. If not using the HTML element, use an npm package for the same effect.</p>

					<h3>Color Contrast</h3>
					<p>Color contrast is vital for readability. Use a font size of at least 16px to prevent eye strain, and keep line length between 50 - 75 characters. The CSS unit <span class="code">ch</span>: character unit, where 1 character is the width of the '0' character. The WAI color contrast formula assigns colors a value from 1 to 21, with a minimum ratio of 4:1 for standard text and 3:1 for large text. Tools like Figma or a Lighthouse audit can identify elements with poor contrast, and Chrome DevTools can inspect elements for contrast issues, providing warnings for accessibility > contrast.</p>

					<h3>Alt Text</h3>
					<p>Alt text is essential for people who cannot see images, ensuring that they receive the information conveyed by images.</p>
					<h3>Correct Semantics</h3>
					<p>Correct semantics helps screen readers understand the structure and meaning, reducing the need for ARIA attributes. Well-structured HTML improves the visibility of content.</p>

					<h3>Further Applications:</h3>
					<ul>
						<li>Skip to content (skip navigation).</li>
						<li>Prefers-reduced-motion.</li>
						<li>All autoplay videos/carousels must be able to be paused.</li>
						<li>Experience using a screen reader yourself.</li>
					</ul>
				</article>
				<article class="reflection">
					<h2>My use, opinions and ideas</h2>
					<ul>
						<li>How likely to use in the future: <em>Very likely</em></li>
						<li>How likely to use in the future: <em>Very likely</em></li>
					</ul>
				</article>
			</section>
		</main>
		<footer><%- include ('../partials/footer.ejs'); %></footer>
	</body>
</html>
