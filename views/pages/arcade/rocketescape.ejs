<!DOCTYPE html>
<html lang="en">
	<head>
		<%- include ('../../partials/head.ejs'); %>
		<link rel="stylesheet" href="/styles/rocketescape.css" />
	</head>

	<body>
		<%- include ('../../partials/loader.ejs') %>
		<main class="rocketescape">
			<div>
				<a href="/arcade"
					><span class="material-symbols-outlined">arrow_back_ios</span></a
				>
				<h1>Bri&#8217s Flight Frenzy</h1>
			</div>

			<section id="playwindow">
				<div class="clouds"></div>
				<div class="gameover">
					<h2>Game Over! <span aria-hidden="true">:(</span></h2>
					<div>
						<img src="../images/rocketescape/littlebri128x128.png" alt="" />
						<p>
							Oof, I was hit by a bird... or was it a plane? It all went too
							fast. Either way, I'm now dead. Thanks.
						</p>
					</div>
					<button id="playagain">Play again</button>
				</div>
			</section>

			<div class="warning">
				<h2>Sorry, Bri&#8217s Flight Frenzy is currently only available on desktop!</h2>
				<a href="/arcade">Go back to the arcade</a>
			</div>

			<button class="howtotrigger" aria-label="Open how-to window">
				<span class="material-symbols-outlined">question_mark</span>
			</button>

			<section class="howtoplay">
				<div>
					<h2>How to Play</h2>
					<p>
						Something amazing has happened: Bri has grown wings and is now
						learning how to fly! But she keeps getting knocked down by dense
						clouds, stray airplanes and flocks of birds. How long can you keep
						her in the air? Move your cursor to move her around the sky.
					</p>
					<button class="closetutorial" aria-label="Close how-to window">
						Got it!
					</button>
				</div>
			</section>
		</main>

		<script src="/scripts/darkmode.js"></script>
		<script src="/scripts/loader.js" type="module"></script>
		<script>
			const howToButton = document.querySelector(".howtotrigger");
			const howToWindow = document.querySelector(".howtoplay");
			const closeHowTo = document.querySelector(".closetutorial");

			if (howToButton) {
				howToButton.addEventListener("click", () => {
					howToWindow.classList.add("activeHowTo");
				});

				closeHowTo.addEventListener("click", () => {
					howToWindow.classList.remove("activeHowTo");
				});
			}

			document.addEventListener("DOMContentLoaded", function () {
				const playwindow = document.getElementById("playwindow");
				const gameoverWindow = document.querySelector(".gameover");
				let bullets = document.querySelectorAll(".bullet");
				let bulletSpeed = 7; // Starting speed in seconds
				let bulletInterval = 2000; // Starting interval in milliseconds
				let bulletsPerInterval = 1; // Starting with one bullet per interval
				const maxBulletsPerInterval = 4; // Maximum bullets per interval
				let bulletCreationInterval;
				let isGamePaused = false;

				function createBullet() {
					for (let i = 0; i < bulletsPerInterval; i++) {
						const bullet = document.createElement("div");
						const typeOfBullet = [
							"cloud",
							"cloud",
							"cloud",
							"plane",
							"bird",
							"bird",
						];
						let randomBullet = Math.floor(Math.random() * typeOfBullet.length);
						let randomBulletType = typeOfBullet[randomBullet];
						bullet.classList.add(`${randomBulletType}`);
						bullet.classList.add("bullet");

						// Randomize the starting position
						const randomTop = Math.random() * (playwindow.clientHeight - 130); // Ensure it stays within the playwindow height

						bullet.style.top = `${randomTop}px`;
						bullet.style.left = `${playwindow.clientWidth}px`; // Start off screen to the right

						// Set animation duration and delay based on bulletSpeed
						bullet.style.animation = `bulletMove ${bulletSpeed}s linear`;
						bullet.style.animationDelay = `${Math.random() * 2}s`; // Random delay up to 2 seconds

						playwindow.appendChild(bullet);

						// Remove bullet after it goes off screen
						bullet.addEventListener("animationend", () => {
							bullet.remove();
						});

						// Add event listener for game over
						bullet.addEventListener("mouseover", () => {
							gameOver();
						});
					}
					// Update bullets NodeList
					bullets = document.querySelectorAll(".bullet");
				}

				function increaseDifficulty() {
					bulletSpeed = Math.max(1, bulletSpeed - 0.1); // Increase speed up to a minimum of 1s
					bulletInterval = Math.max(200, bulletInterval - 100); // Increase bullet frequency up to a minimum of 200ms
					bulletsPerInterval = Math.min(
						maxBulletsPerInterval,
						bulletsPerInterval + 1
					); // Increase bullets per interval up to a maximum
				}

				function startGame() {
					bulletCreationInterval = setInterval(() => {
						createBullet();
						increaseDifficulty();
					}, bulletInterval);
				}

				function pauseGame() {
					isGamePaused = true;
					clearInterval(bulletCreationInterval);
					bullets.forEach((bullet) => {
						bullet.style.animationPlayState = "paused";
					});
				}

				function resumeGame() {
					isGamePaused = false;
					bullets.forEach((bullet) => {
						bullet.style.animationPlayState = "running";
					});
					startGame();
				}

				function gameOver() {
					// Remove all bullets
					Array.from(bullets).forEach((indvBullet) => {
						indvBullet.remove();
					});
					gameoverWindow.classList.add("gameisover");
					clearInterval(bulletCreationInterval); // Stop bullet creation
				}

				const playAgainBtn = document.querySelector("#playagain");
				playAgainBtn.addEventListener("click", () => {
					// Reset game variables
					bulletSpeed = 7; // Starting speed in seconds
					bulletInterval = 2000; // Starting interval in milliseconds
					bulletsPerInterval = 1; // Starting with one bullet per interval

					// Remove game over class
					gameoverWindow.classList.remove("gameisover");

					// Clear any remaining bullets
					Array.from(document.querySelectorAll(".bullet")).forEach(
						(indvBullet) => {
							indvBullet.remove();
						}
					);

					// Start game again
					startGame();
				});

				// Handle window blur and focus events
				window.addEventListener("blur", () => {
					if (!gameoverWindow.classList.contains("gameisover")) {
						pauseGame();
					}
				});

				window.addEventListener("focus", () => {
					if (isGamePaused) {
						resumeGame();
					}
				});

				// Start the game initially
				startGame();
			});
		</script>
	</body>
</html>
